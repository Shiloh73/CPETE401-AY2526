CREATE TABLE IF NOT EXISTS AUTHORS (
    IDNUM int(10) UNIQUE PRIMARY KEY,
    FNAME VARCHAR(100) NOT NULL,
    LNAME VARCHAR(100) NOT NULL,
    BIOGRAPHY text,
    DOB date
);

CREATE TABLE IF NOT EXISTS PUBLISHERS (
    IDNUM int(10) PRIMARY KEY,
    NAME VARCHAR(100)NOT NULL UNIQUE,
    COUNTRY VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOKS (
    IDNUM int(10) UNIQUE PRIMARY KEY,
    BOOKTITLE VARCHAR(100) NOT NULL,
    ISBN int(100) UNIQUE,
    PUBDATE date NOT NULL,
    PRICE decimal(10, 2),
    PUBLISHER_ID int,
    FOREIGN KEY (PUBLISHER_ID) REFERENCES PUBLISHERS(IDNUM)
);

CREATE TABLE IF NOT EXISTS BOOK_AUTHORS (
    BOOK_ID int(10) UNIQUE,
    AUTHOR_ID int(10) UNIQUE,
    PRIMARY KEY (BOOK_ID, AUTHOR_ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(IDNUM) ON DELETE CASCADE,
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHORS(IDNUM) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PATIENTS (
    IDNUM int PRIMARY KEY UNIQUE,
    FNAME VARCHAR(100) NOT NULL,
    LNAME VARCHAR(100) NOT NULL,
    DOB date NOT NULL,
    PHONE_NUM VARCHAR(11) UNIQUE,
    CREATION_OF_PATIENT_RECORD date
);

CREATE TABLE IF NOT EXISTS DOCTORS (
    IDNUM int(10) PRIMARY KEY UNIQUE,
    FNAME VARCHAR(100) NOT NULL,
    LNAME VARCHAR(100) NOT NULL,
    MED_SPECIALTY VARCHAR(100) NOT NULL,
    YEAR_LICENSEDTOPRACTICE year
);

CREATE TABLE IF NOT EXISTS APPOINTMENTS (
    IDNUM int(10) PRIMARY KEY UNIQUE,
    DOCTOR_IDNUM int,
    PATIENT_IDNUM int,
    DATEOFAPPOINTMENT date NOT NULL,
    TIMEOFAPPOINTMENT time NOT NULL,
    REASON text,
    STATUSOFAPPOINTMENT enum('Scheduled', 'Completed', 'Canceled', 'No-Show') DEFAULT 'Scheduled',
    FOREIGN KEY (DOCTOR_IDNUM) REFERENCES DOCTORS(IDNUM) ON DELETE CASCADE,
    FOREIGN KEY (PATIENT_IDNUM) REFERENCES PATIENTS(IDNUM) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DEPARTMENTS (
    IDNUM int UNIQUE,
    DEPT_NAME VARCHAR(100) UNIQUE,
    DEPT_OFFICE_LOC VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS COURSES (
    IDNUM int PRIMARY KEY UNIQUE,
    COURSE_CODE VARCHAR(10) UNIQUE,
    COURSE_TITLE VARCHAR(100),
    NUM_CREDITS tinyint CHECK (NUM_CREDITS > 0),
    DEPARTMENT_ID int,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(IDNUM) ON DELETE CASCADE,
    PREREQUISITE_COURSE_ID int,
    FOREIGN KEY (PREREQUISITE_COURSE_ID) REFERENCES COURSES (IDNUM) ON DELETE SET NULL
);
